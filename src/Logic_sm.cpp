//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Logic.sm
//

#include "Logic.h"
#include "Logic_sm.h"

using namespace statemap;

// Static class declarations.
StirMap_MainState StirMap::MainState("StirMap::MainState", 0);
StirMap_MapState StirMap::MapState("StirMap::MapState", 1);
StirMap_StirState StirMap::StirState("StirMap::StirState", 2);
StirMap_AgainState StirMap::AgainState("StirMap::AgainState", 3);
StirMap_StirBuyPause StirMap::StirBuyPause("StirMap::StirBuyPause", 4);
StirMap_OpponentState StirMap::OpponentState("StirMap::OpponentState", 5);
StirMap_BattleLoadState StirMap::BattleLoadState("StirMap::BattleLoadState", 6);
StirMap_BattleState StirMap::BattleState("StirMap::BattleState", 7);
StirMap_BattleEndState StirMap::BattleEndState("StirMap::BattleEndState", 8);
StirMap_EndLoadState StirMap::EndLoadState("StirMap::EndLoadState", 9);
StirMap_OpponentReturn StirMap::OpponentReturn("StirMap::OpponentReturn", 10);
StirMap_StirReturn StirMap::StirReturn("StirMap::StirReturn", 11);
StirMap_MapReturn StirMap::MapReturn("StirMap::MapReturn", 12);
StirMap_MainReturn StirMap::MainReturn("StirMap::MainReturn", 13);
StirMap_Return StirMap::Return("StirMap::Return", 14);
StirMap_Error StirMap::Error("StirMap::Error", 15);
ArenaMap_MainState ArenaMap::MainState("ArenaMap::MainState", 16);
ArenaMap_MapState ArenaMap::MapState("ArenaMap::MapState", 17);
ArenaMap_ArenaMainState ArenaMap::ArenaMainState("ArenaMap::ArenaMainState", 18);
ArenaMap_ConfirmStartState ArenaMap::ConfirmStartState("ArenaMap::ConfirmStartState", 19);
ArenaMap_ArenaReuse ArenaMap::ArenaReuse("ArenaMap::ArenaReuse", 20);
ArenaMap_ConfirmStartReuse ArenaMap::ConfirmStartReuse("ArenaMap::ConfirmStartReuse", 21);
ArenaMap_ArenaFindState ArenaMap::ArenaFindState("ArenaMap::ArenaFindState", 22);
ArenaMap_ArenaChoice ArenaMap::ArenaChoice("ArenaMap::ArenaChoice", 23);
ArenaMap_OpponentInfoState ArenaMap::OpponentInfoState("ArenaMap::OpponentInfoState", 24);
ArenaMap_ArenaStats ArenaMap::ArenaStats("ArenaMap::ArenaStats", 25);
ArenaMap_OpponentStats ArenaMap::OpponentStats("ArenaMap::OpponentStats", 26);
ArenaMap_EndPhaseState ArenaMap::EndPhaseState("ArenaMap::EndPhaseState", 27);
ArenaMap_OpponentTryState ArenaMap::OpponentTryState("ArenaMap::OpponentTryState", 28);
ArenaMap_BattleLoadState ArenaMap::BattleLoadState("ArenaMap::BattleLoadState", 29);
ArenaMap_BattleState ArenaMap::BattleState("ArenaMap::BattleState", 30);
ArenaMap_BattleEndState ArenaMap::BattleEndState("ArenaMap::BattleEndState", 31);
ArenaMap_EndLoadState ArenaMap::EndLoadState("ArenaMap::EndLoadState", 32);
ArenaMap_EndLoadPauseState ArenaMap::EndLoadPauseState("ArenaMap::EndLoadPauseState", 33);
ArenaMap_ArenaReturn ArenaMap::ArenaReturn("ArenaMap::ArenaReturn", 34);
ArenaMap_MapReturn ArenaMap::MapReturn("ArenaMap::MapReturn", 35);
ArenaMap_MainMail ArenaMap::MainMail("ArenaMap::MainMail", 36);
ArenaMap_CheckMail ArenaMap::CheckMail("ArenaMap::CheckMail", 37);
ArenaMap_MailReturn ArenaMap::MailReturn("ArenaMap::MailReturn", 38);
ArenaMap_MainReturn ArenaMap::MainReturn("ArenaMap::MainReturn", 39);
ArenaMap_Return ArenaMap::Return("ArenaMap::Return", 40);
ArenaMap_Error ArenaMap::Error("ArenaMap::Error", 41);
PortalMap_MainState PortalMap::MainState("PortalMap::MainState", 42);
PortalMap_MapState PortalMap::MapState("PortalMap::MapState", 43);
PortalMap_PortalMain PortalMap::PortalMain("PortalMap::PortalMain", 44);
PortalMap_ChangeLevel PortalMap::ChangeLevel("PortalMap::ChangeLevel", 45);
PortalMap_OpponentState PortalMap::OpponentState("PortalMap::OpponentState", 46);
PortalMap_BattleLoadState PortalMap::BattleLoadState("PortalMap::BattleLoadState", 47);
PortalMap_BattleState PortalMap::BattleState("PortalMap::BattleState", 48);
PortalMap_BattleEndState PortalMap::BattleEndState("PortalMap::BattleEndState", 49);
PortalMap_PortalMainReturn PortalMap::PortalMainReturn("PortalMap::PortalMainReturn", 50);
PortalMap_OpponentReturn PortalMap::OpponentReturn("PortalMap::OpponentReturn", 51);
PortalMap_MapReturn PortalMap::MapReturn("PortalMap::MapReturn", 52);
PortalMap_MainReturn PortalMap::MainReturn("PortalMap::MainReturn", 53);
PortalMap_Return PortalMap::Return("PortalMap::Return", 54);
PortalMap_Error PortalMap::Error("PortalMap::Error", 55);
MainMap_MainState MainMap::MainState("MainMap::MainState", 56);
MainMap_ArenaState MainMap::ArenaState("MainMap::ArenaState", 57);
MainMap_StirState MainMap::StirState("MainMap::StirState", 58);
MainMap_PortalState MainMap::PortalState("MainMap::PortalState", 59);
MainMap_Recover MainMap::Recover("MainMap::Recover", 60);
MainMap_StartRecover MainMap::StartRecover("MainMap::StartRecover", 61);
RecoveryMap_MainState RecoveryMap::MainState("RecoveryMap::MainState", 62);
RecoveryMap_Bluestacks RecoveryMap::Bluestacks("RecoveryMap::Bluestacks", 63);
RecoveryMap_Unknown RecoveryMap::Unknown("RecoveryMap::Unknown", 64);
RecoveryMap_Return RecoveryMap::Return("RecoveryMap::Return", 65);

void LogicState::Error(LogicContext<Logic>& context)
{
    Default(context);
}

void LogicState::Next(LogicContext<Logic>& context)
{
    Default(context);
}

void LogicState::Recovered(LogicContext<Logic>& context)
{
    Default(context);
}

void LogicState::Success(LogicContext<Logic>& context)
{
    Default(context);
}

void LogicState::Default(LogicContext<Logic>& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void StirMap_MainState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_MainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("map");
            context.setState(StirMap::MapState);
        }
        catch (...)
        {
            context.setState(StirMap::MapState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_MapState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_MapState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "map")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            ctxt.PressButton("stir");
            context.setState(StirMap::StirState);
        }
        catch (...)
        {
            context.setState(StirMap::StirState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_StirState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_StirState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "stir" && ctxt.StateName() == "again")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("again");
            context.setState(StirMap::AgainState);
        }
        catch (...)
        {
            context.setState(StirMap::AgainState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "no_diamonds")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::StirReturn);
        }
        catch (...)
        {
            context.setState(StirMap::StirReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_warning_buy" && ctxt.GetValue("stir_update_soon") != 1)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("cancel");
            context.setState(StirMap::StirReturn);
        }
        catch (...)
        {
            context.setState(StirMap::StirReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_warning_buy" && ctxt.GetValue("stir_update_soon") == 1)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("ok");
            context.setState(StirMap::StirState);
        }
        catch (...)
        {
            context.setState(StirMap::StirState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_opponent")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::StirState);
        }
        catch (...)
        {
            context.setState(StirMap::StirState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir" && ctxt.GetCounter("enemy") < 16)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton(ctxt.GetCounter("enemy") + 1);
            ctxt.IncCounter("enemy");
            context.setState(StirMap::OpponentState);
        }
        catch (...)
        {
            context.setState(StirMap::OpponentState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir" && ctxt.GetCounter("enemy") >= 16)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::MapReturn);
        }
        catch (...)
        {
            context.setState(StirMap::MapReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_AgainState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_AgainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "stir_buy" && ctxt.GetValue("stir_buy") != 1)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::StirReturn);
        }
        catch (...)
        {
            context.setState(StirMap::StirReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_buy" && ctxt.GetValue("stir_buy") == 1)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("ok");
            context.setState(StirMap::StirBuyPause);
        }
        catch (...)
        {
            context.setState(StirMap::StirBuyPause);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::StirState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_StirBuyPause::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("stir_buy_timeout");
}

void StirMap_StirBuyPause::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.GetTimer("stir_buy_timeout") >= 10000)
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::StirState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_OpponentState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("opponent_timeout");
    ctxt.StartTimer("opponent_start_pause");
}

void StirMap_OpponentState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "stir" && ctxt.GetTimer("opponent_timeout") >= ctxt.GetValue("opponent_timeout"))
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::StirState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_opponent" && ctxt.GetTimer("opponent_start_pause") >= 2000)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(StirMap::BattleLoadState);
        }
        catch (...)
        {
            context.setState(StirMap::BattleLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_opponent" && ctxt.GetTimer("opponent_start_pause") < 2000)

    {
        // No actions.
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_BattleLoadState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_BattleLoadState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "load")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::BattleState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "event_battle")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "stir_few")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::OpponentReturn);
        }
        catch (...)
        {
            context.setState(StirMap::OpponentReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "warning_hp")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::OpponentState);
        }
        catch (...)
        {
            context.setState(StirMap::OpponentState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_BattleState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_BattleState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "battle")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_BattleEndState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_BattleEndState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "battle_end_defeat" && ctxt.StateName() == "home")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::EndLoadState);
        }
        catch (...)
        {
            context.setState(StirMap::EndLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle_end_victory" && ctxt.StateName() == "home")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::EndLoadState);
        }
        catch (...)
        {
            context.setState(StirMap::EndLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_EndLoadState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_EndLoadState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "load")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::MainReturn);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Return);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_OpponentReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_OpponentReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "stir_opponent")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::StirReturn);
        }
        catch (...)
        {
            context.setState(StirMap::StirReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_StirReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_StirReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "stir")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::MapReturn);
        }
        catch (...)
        {
            context.setState(StirMap::MapReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_MapReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_MapReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "map")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(StirMap::MainReturn);
        }
        catch (...)
        {
            context.setState(StirMap::MainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_MainReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void StirMap_MainReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Return);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(StirMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void StirMap_Return::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Success();

}

void StirMap_Error::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Error();

}

void ArenaMap_MainState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_MainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("map");
            context.setState(ArenaMap::MapState);
        }
        catch (...)
        {
            context.setState(ArenaMap::MapState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_MapState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_MapState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "map")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("arena");
            context.setState(ArenaMap::ArenaMainState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaMainState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ArenaMainState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_ArenaMainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_find")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && (ctxt.GetValue("arena_ticket") == 1 || ctxt.GetValue("arena_ticket") == 3) && ctxt.StateName() == "ticket")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::ConfirmStartState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ConfirmStartState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && (ctxt.GetValue("arena_ticket") == 0 || ctxt.GetValue("arena_ticket") == 2) && ctxt.StateName() == "food")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::ConfirmStartState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ConfirmStartState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && (ctxt.GetValue("arena_ticket") == 1 || ctxt.GetValue("arena_ticket") == 3) && ctxt.StateName() == "food")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("ticket");
            context.setState(ArenaMap::ArenaMainState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaMainState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && (ctxt.GetValue("arena_ticket") == 0 || ctxt.GetValue("arena_ticket") == 2) && ctxt.StateName() == "ticket")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("food");
            context.setState(ArenaMap::ArenaMainState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaMainState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ConfirmStartState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_ConfirmStartState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if ((ctxt.PageName() == "arena_few" || ctxt.PageName() == "ticket_few") && (ctxt.GetValue("arena_ticket") == 0 || ctxt.GetValue("arena_ticket") == 1))
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ((ctxt.PageName() == "arena_few" || ctxt.PageName() == "ticket_few") && (ctxt.GetValue("arena_ticket") == 2 || ctxt.GetValue("arena_ticket") == 3))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaReuse);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReuse);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_confirm_start")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::ArenaFindState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaFindState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ArenaReuse::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_ArenaReuse::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_main" && ctxt.GetValue("arena_ticket") == 2 && ctxt.StateName() == "food")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("ticket");
            context.setState(ArenaMap::ArenaReuse);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReuse);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && ctxt.GetValue("arena_ticket") == 2 && ctxt.StateName() == "ticket")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::ConfirmStartReuse);
        }
        catch (...)
        {
            context.setState(ArenaMap::ConfirmStartReuse);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && ctxt.GetValue("arena_ticket") == 3 && ctxt.StateName() == "ticket")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("food");
            context.setState(ArenaMap::ArenaReuse);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReuse);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_main" && ctxt.GetValue("arena_ticket") == 3 && ctxt.StateName() == "food")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::ConfirmStartReuse);
        }
        catch (...)
        {
            context.setState(ArenaMap::ConfirmStartReuse);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ConfirmStartReuse::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_ConfirmStartReuse::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if ((ctxt.PageName() == "arena_few" || ctxt.PageName() == "ticket_few"))
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_confirm_start")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::ArenaFindState);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaFindState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ArenaFindState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_ArenaFindState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_find")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ArenaChoice::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("unknown_timeout");
}

void ArenaMap_ArenaChoice::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_find")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::ArenaChoice);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "unknown" && ctxt.GetTimer("unknown_timeout") >= 1000)

    {
        LogicState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.StartTimer("unknown_timeout");
            ctxt.PressButton("2");
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else if (ctxt.PageName() == "arena_choice" && (ctxt.StateName() == "end" || ctxt.StateName() == "reward") && ctxt.GetValue("arena_stats") != 0)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            context.setState(ArenaMap::ArenaStats);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaStats);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice" && (ctxt.StateName() == "end" || ctxt.StateName() == "reward") && ctxt.GetValue("arena_stats") == 0)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice" && ctxt.StateName() == "home" && ctxt.GetCounter("enemy") < 15)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton(ctxt.GetCounter("enemy") + 1);
            context.setState(ArenaMap::OpponentInfoState);
        }
        catch (...)
        {
            context.setState(ArenaMap::OpponentInfoState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice" && ctxt.StateName() == "home" && ctxt.GetCounter("enemy") >= 15)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("enemy");
            context.setState(ArenaMap::EndPhaseState);
        }
        catch (...)
        {
            context.setState(ArenaMap::EndPhaseState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_OpponentInfoState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("opponent_timeout");
    ctxt.StartTimer("unknown_timeout");
}

void ArenaMap_OpponentInfoState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "unknown" && ctxt.GetTimer("unknown_timeout") >= 1000)
    {
        LogicState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.StartTimer("unknown_timeout");
            ctxt.PressButton("2");
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else if (ctxt.PageName() == "arena_choice" && ctxt.GetTimer("opponent_timeout") >= ctxt.GetValue("opponent_timeout"))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.GetOpponentInfo(ctxt.GetCounter("enemy"));
            ctxt.IncCounter("enemy");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "opponent")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.GetOpponentInfo(ctxt.GetCounter("enemy"));
            ctxt.IncCounter("enemy");
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ArenaStats::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("unknown_timeout");
}

void ArenaMap_ArenaStats::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "unknown" && ctxt.GetTimer("unknown_timeout") >= 1000)
    {
        LogicState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.StartTimer("unknown_timeout");
            ctxt.PressButton("2");
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else if (ctxt.PageName() == "arena_choice" && (ctxt.StateName() == "end" || ctxt.StateName() == "reward") && ctxt.GetCounter("enemy") < 15)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton(ctxt.GetCounter("enemy") + 1);
            context.setState(ArenaMap::OpponentStats);
        }
        catch (...)
        {
            context.setState(ArenaMap::OpponentStats);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice" && (ctxt.StateName() == "end" || ctxt.StateName() == "reward") && ctxt.GetCounter("enemy") >= 15)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.WriteLogResult();
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_OpponentStats::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("opponent_timeout");
    ctxt.StartTimer("unknown_timeout");
}

void ArenaMap_OpponentStats::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "unknown" && ctxt.GetTimer("unknown_timeout") >= 1000)
    {
        LogicState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.StartTimer("unknown_timeout");
            ctxt.PressButton("2");
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else if (ctxt.PageName() == "arena_choice" && ctxt.GetTimer("opponent_timeout") >= ctxt.GetValue("opponent_timeout"))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.GetOpponentInfo(ctxt.GetCounter("enemy"));
            ctxt.IncCounter("enemy");
            context.setState(ArenaMap::ArenaStats);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaStats);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "opponent")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.GetOpponentInfo(ctxt.GetCounter("enemy"));
            ctxt.IncCounter("enemy");
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaStats);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaStats);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_EndPhaseState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_EndPhaseState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_choice" && ctxt.IsValidPhase())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton(ctxt.FindOpponent() + 1);
            context.setState(ArenaMap::OpponentTryState);
        }
        catch (...)
        {
            context.setState(ArenaMap::OpponentTryState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice" && !ctxt.IsValidPhase())

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::ArenaChoice);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_OpponentTryState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("opponent_timeout");
}

void ArenaMap_OpponentTryState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_choice" && ctxt.GetTimer("opponent_timeout") >= ctxt.GetValue("opponent_timeout"))
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::ArenaChoice);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "opponent" && ctxt.IsValidOpponent(ctxt.FindOpponent()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(ArenaMap::BattleLoadState);
        }
        catch (...)
        {
            context.setState(ArenaMap::BattleLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "opponent" && !ctxt.IsValidOpponent(ctxt.FindOpponent()))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::ArenaChoice);
        }
        catch (...)
        {
            context.setState(ArenaMap::ArenaChoice);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_BattleLoadState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_BattleLoadState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "load")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::BattleState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_BattleState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_BattleState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "battle")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_BattleEndState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_BattleEndState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "battle_end_defeat" && ctxt.StateName() == "home" && ctxt.GetValue("arena_stats") != 2)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::EndLoadState);
        }
        catch (...)
        {
            context.setState(ArenaMap::EndLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle_end_victory" && ctxt.StateName() == "home" && ctxt.GetValue("arena_stats") != 2)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::EndLoadState);
        }
        catch (...)
        {
            context.setState(ArenaMap::EndLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle_end_defeat" && ctxt.StateName() == "home" && ctxt.GetValue("arena_stats") == 2)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.WriteLogPhase(false);
            ctxt.PressButton("close");
            context.setState(ArenaMap::EndLoadState);
        }
        catch (...)
        {
            context.setState(ArenaMap::EndLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle_end_victory" && ctxt.StateName() == "home" && ctxt.GetValue("arena_stats") == 2)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.WriteLogPhase(true);
            ctxt.PressButton("close");
            context.setState(ArenaMap::EndLoadState);
        }
        catch (...)
        {
            context.setState(ArenaMap::EndLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_EndLoadState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_EndLoadState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "load")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::EndLoadPauseState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "arena_choice")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::EndLoadPauseState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_EndLoadPauseState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("end_phase_timeout");
}

void ArenaMap_EndLoadPauseState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.GetTimer("end_phase_timeout") >= 10000)
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::ArenaChoice);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_ArenaReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_ArenaReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "arena_main")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::MapReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::MapReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_MapReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_MapReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "map" && ctxt.GetValue("check_mail") == 1)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::MainMail);
        }
        catch (...)
        {
            context.setState(ArenaMap::MainMail);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main" && ctxt.GetValue("check_mail") == 1)

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::MainMail);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "map" && ctxt.GetValue("check_mail") != 1)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::MainReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::MainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main" && ctxt.GetValue("check_mail") != 1)

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::MainReturn);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_MainMail::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_MainMail::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("mail");
            context.setState(ArenaMap::CheckMail);
        }
        catch (...)
        {
            context.setState(ArenaMap::CheckMail);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_CheckMail::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_CheckMail::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "mail")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("take");
            context.setState(ArenaMap::MailReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::MailReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_MailReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_MailReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "mail")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(ArenaMap::MainReturn);
        }
        catch (...)
        {
            context.setState(ArenaMap::MainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_MainReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void ArenaMap_MainReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Return);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(ArenaMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void ArenaMap_Return::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Success();

}

void ArenaMap_Error::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Error();

}

void PortalMap_MainState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_MainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("map");
            context.setState(PortalMap::MapState);
        }
        catch (...)
        {
            context.setState(PortalMap::MapState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_MapState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_MapState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "map")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("portal");
            context.setState(PortalMap::PortalMain);
        }
        catch (...)
        {
            context.setState(PortalMap::PortalMain);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_PortalMain::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_PortalMain::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "portal_main" && ctxt.GetValue("portal_level") == 0)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(PortalMap::OpponentState);
        }
        catch (...)
        {
            context.setState(PortalMap::OpponentState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "portal_main" && ctxt.GetValue("portal_level") != 0)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.StartCounter("level_counter");
            context.setState(PortalMap::ChangeLevel);
        }
        catch (...)
        {
            context.setState(PortalMap::ChangeLevel);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_ChangeLevel::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_ChangeLevel::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "portal_opponent")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::PortalMain);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "portal_main" && std::abs(ctxt.GetValue("portal_level")) == ctxt.GetCounter("level_counter"))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(PortalMap::OpponentState);
        }
        catch (...)
        {
            context.setState(PortalMap::OpponentState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "portal_main" && ctxt.GetValue("portal_level") > 0)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Move("level", 0, 1);
            ctxt.IncCounter("level_counter");
            context.setState(PortalMap::ChangeLevel);
        }
        catch (...)
        {
            context.setState(PortalMap::ChangeLevel);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "portal_main" && ctxt.GetValue("portal_level") < 0)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Move("level", 0, -1);
            ctxt.IncCounter("level_counter");
            context.setState(PortalMap::ChangeLevel);
        }
        catch (...)
        {
            context.setState(PortalMap::ChangeLevel);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_OpponentState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
    ctxt.StartTimer("opponent_timeout");
}

void PortalMap_OpponentState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "portal_main" && ctxt.GetTimer("opponent_timeout") >= ctxt.GetValue("opponent_timeout"))
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::PortalMainReturn);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "portal_opponent")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("start");
            context.setState(PortalMap::BattleLoadState);
        }
        catch (...)
        {
            context.setState(PortalMap::BattleLoadState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_BattleLoadState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_BattleLoadState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "load")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::BattleState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "warning_hp")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(PortalMap::OpponentState);
        }
        catch (...)
        {
            context.setState(PortalMap::OpponentState);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_BattleState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_BattleState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "battle")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::BattleEndState);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_BattleEndState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_BattleEndState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "battle_end_defeat" && ctxt.StateName() == "home")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(PortalMap::PortalMainReturn);
        }
        catch (...)
        {
            context.setState(PortalMap::PortalMainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle_end_victory" && ctxt.StateName() == "home")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(PortalMap::PortalMainReturn);
        }
        catch (...)
        {
            context.setState(PortalMap::PortalMainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_PortalMainReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_PortalMainReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "load")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::PortalMainReturn);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "portal_main")

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(PortalMap::MapReturn);
        }
        catch (...)
        {
            context.setState(PortalMap::MapReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_OpponentReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_OpponentReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "portal_opponent")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(PortalMap::PortalMainReturn);
        }
        catch (...)
        {
            context.setState(PortalMap::PortalMainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_MapReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_MapReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "map")
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(PortalMap::MainReturn);
        }
        catch (...)
        {
            context.setState(PortalMap::MainReturn);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Return);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_MainReturn::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("state_timeout");
}

void PortalMap_MainReturn::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Return);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("state_timeout") >= ctxt.GetValue("state_timeout"))

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(PortalMap::Error);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void PortalMap_Return::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Success();

}

void PortalMap_Error::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Error();

}

void MainMap_MainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() != "main")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::StartRecover);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main" && ctxt.GetValue("program") == 0)

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::ArenaState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main" && ctxt.GetValue("program") == 1)

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::StirState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "main" && ctxt.GetValue("program") == 2)

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::PortalState);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void MainMap_ArenaState::Error(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Recover);
    context.getState().Entry(context);

}

void MainMap_ArenaState::Next(LogicContext<Logic>& context)
{

    context.pushState(ArenaMap::MainState);
    context.getState().Entry(context);

}

void MainMap_ArenaState::Success(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::MainState);
    context.getState().Entry(context);

}

void MainMap_StirState::Error(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Recover);
    context.getState().Entry(context);

}

void MainMap_StirState::Next(LogicContext<Logic>& context)
{

    context.pushState(StirMap::MainState);
    context.getState().Entry(context);

}

void MainMap_StirState::Success(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::MainState);
    context.getState().Entry(context);

}

void MainMap_PortalState::Error(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Recover);
    context.getState().Entry(context);

}

void MainMap_PortalState::Next(LogicContext<Logic>& context)
{

    context.pushState(PortalMap::MainState);
    context.getState().Entry(context);

}

void MainMap_PortalState::Success(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::MainState);
    context.getState().Entry(context);

}

void MainMap_Recover::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::MainState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() != "main")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(MainMap::StartRecover);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void MainMap_StartRecover::Next(LogicContext<Logic>& context)
{

    context.pushState(RecoveryMap::MainState);
    context.getState().Entry(context);

}

void MainMap_StartRecover::Recovered(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.setState(MainMap::Recover);
    context.getState().Entry(context);

}

void RecoveryMap_MainState::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("close_timeout");
}

void RecoveryMap_MainState::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() == "main")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::Return);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "battle")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::MainState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "load")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::MainState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "bluestacks")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::Bluestacks);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "unknown")

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::Unknown);
        context.getState().Entry(context);
    }
    else if (ctxt.GetTimer("close_timeout") >= ctxt.GetValue("opponent_timeout"))

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.PressButton("close");
            context.setState(RecoveryMap::MainState);
        }
        catch (...)
        {
            context.setState(RecoveryMap::MainState);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
    }

}

void RecoveryMap_Bluestacks::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("bluestacks_timeout");
}

void RecoveryMap_Bluestacks::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() != "bluestacks")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::MainState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "bluestacks" && ctxt.GetTimer("bluestacks_timeout") >= 60000)

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.RunBluestacks();
            context.setState(RecoveryMap::Bluestacks);
        }
        catch (...)
        {
            context.setState(RecoveryMap::Bluestacks);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
    }

}

void RecoveryMap_Unknown::Entry(LogicContext<Logic>& context)

{
    Logic& ctxt = context.getOwner();

    ctxt.StartTimer("unknown_timeout");
}

void RecoveryMap_Unknown::Next(LogicContext<Logic>& context)
{
    Logic& ctxt = context.getOwner();

    if (ctxt.PageName() != "unknown")
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::MainState);
        context.getState().Entry(context);
    }
    else if (ctxt.PageName() == "unknown" && ctxt.GetTimer("unknown_timeout") >= 1200000)

    {
        context.getState().Exit(context);
        // No actions.
        context.setState(RecoveryMap::MainState);
        context.getState().Entry(context);
    }
    else
    {
    }

}

void RecoveryMap_Return::Next(LogicContext<Logic>& context)
{

    context.getState().Exit(context);
    context.popState();
    context.Recovered();

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
